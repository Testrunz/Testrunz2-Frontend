import { Modal } from "antd";
import styles from "./createnewrunzmodal.module.css";
import Flex from "../../packages/Flex/Flex";
import Button from "../../packages/Button/Button";
import Text from "../../packages/Text/Text";
import SvgClose from "../../icons/SvgClose";
import SelectTag from "../../packages/SelectTag/SelectTag";
import InputText from "../../packages/InputText/InputText";
import PeopleList from "./PeopleList";
import { FormikProps } from "formik";
import { formType } from "./RunzScreen";
import { useSelector } from "react-redux";
import { RootState } from "../../redux/store";
import Loader from "../../packages/Loader/Loader";
import moment from "moment";
import ErrorMessage from "../../packages/ErrorMessage/ErrorMessage";
import { isEmpty } from "../../utils/validators";
import { GetRunzListDetails } from "./store/runz.types";

type Props = {
  open: boolean;
  cancelClick: () => void;
  submit: () => void;
  title: string;
  formik: FormikProps<formType>;
  isLoader: boolean;
  btnTitle?: string;
  runzData?: GetRunzListDetails;
};

const CreateNewRunzModal = ({
  open,
  submit,
  cancelClick,
  title,
  formik,
  isLoader,
  btnTitle = "Create",
  runzData,
}: Props) => {
  const { procedureList, procedureLoader, getUserListdata } = useSelector(
    ({ procedureReducers, getUserListReducers }: RootState) => {
      return {
        procedureList: procedureReducers.data,
        procedureLoader: procedureReducers.isLoading,
        getUserListdata: getUserListReducers.data,
      };
    }
  );

  const procedureOptions: any =
    procedureList?.procedureIds.length > 0 ? procedureList?.procedureIds : [];

  return (
    <Modal
      width={700}
      onCancel={cancelClick}
      title={<Text type="title">{title}</Text>}
      closeIcon={<SvgClose />}
      centered
      open={open}
      footer={
        <Flex row end center className={styles.footer}>
          <Button
            onClick={cancelClick}
            className={styles.cancelBtn}
            types="tertiary-1"
          >
            Cancel
          </Button>
          <Button onClick={submit} className={styles.yesBtn}>
            {btnTitle}
          </Button>
        </Flex>
      }
    >
      <Flex className={styles.overAll}>
        {(procedureLoader || isLoader) && <Loader />}
        <Flex className={styles.inputFlexMargin}>
          <SelectTag
            value={formik.values.procedureName}
            onChange={(event) => {
              if (event) {
                formik.setFieldValue("procedureName", event);
              } else {
                formik.setFieldValue("procedureName", "");
              }
            }}
            options={procedureOptions}
            label="Procedure name"
            required
            getOptionLabel={(option) => option.title}
            getOptionValue={(option) => option.id}
          />
          <ErrorMessage
            name="procedureName"
            touched={formik.touched}
            errors={formik.errors}
          />
        </Flex>
        {!isEmpty(formik.values.procedureName?.id) && (
          <>
            <Flex row className={styles.inputFlexMargin}>
              <Flex flex={1} className={styles.inputMarginRight20}>
                <InputText
                  value={procedureList?.department?.toString()}
                  disabled
                  label="Department"
                />
              </Flex>
              <Flex flex={1}>
                <InputText
                  disabled
                  label="Laboratory"
                  value={procedureList?.labtype?.toString()}
                />
              </Flex>
            </Flex>
            <Flex row className={styles.inputFlexMargin}>
              <Flex flex={1} className={styles.inputMarginRight20}>
                <InputText
                  value={formik.values?.procedureName?.id}
                  disabled
                  label="Procedure ID (autogenerated)"
                />
              </Flex>
              <Flex flex={1}>
                <InputText
                  disabled
                  value={
                    runzData?.experiment?.createdAt
                      ? moment(runzData?.experiment?.createdAt).format(
                          "DD/MM/YYYY"
                        )
                      : ""
                  }
                  label="Created on"
                />
              </Flex>
            </Flex>
          </>
        )}

        <Flex className={styles.inputFlexMargin}>
          <InputText
            required
            label="Test objective"
            onChange={formik.handleChange("testObjective")}
            value={formik.values.testObjective}
          />
          <ErrorMessage
            name="testObjective"
            touched={formik.touched}
            errors={formik.errors}
          />
        </Flex>
        <Flex row className={styles.inputFlexMargin}>
          <Flex flex={1} className={styles.inputMarginRight20}>
            <InputText
              value={formik.values.setDueDate}
              onChange={formik.handleChange("setDueDate")}
              required
              keyboardType="date"
              label="Set due date"
            />
            <ErrorMessage
              name="setDueDate"
              touched={formik.touched}
              errors={formik.errors}
            />
          </Flex>
          <Flex flex={1}>
            <></>
          </Flex>
        </Flex>
        <PeopleList
          options={getUserListdata}
          title="Assign to"
          items={formik.values.assignTo}
          formik={formik}
        />
      </Flex>
    </Modal>
  );
};
export default CreateNewRunzModal;
